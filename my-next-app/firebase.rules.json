{
	"rules": {
		"users": {
			"$uid": {
				".read": "auth != null && (auth.uid == $uid || root.child('adminUids').child(auth.uid).exists())",
				".write": "auth != null && auth.uid == $uid",
				"username": {
					".validate": "newData.isString() && newData.val().length > 0 && !root.child('usernames').child(newData.val()).exists()"
				},
				"createdAt": {
					".validate": "newData.isString() && newData.val().matches(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/)"
				},
				"emailVerified": {
					".validate": "newData.isBoolean()"
				}
			},
			".read": "auth != null && root.child('adminUids').child(auth.uid).exists()",
			".write": "auth != null"
		},
		"usernames": {
			"$username": {
				".read": "auth != null",
				".write": "auth != null && !data.exists()"
			},
			".read": "auth != null",
			".write": "auth != null"
		},
		"adminUids": {
			".read": true,
			".write": "auth != null && root.child('adminUids').child(auth.uid).exists()"
		},
		"locations": {
			"$locationId": {
				".read": true,
				".write": "auth != null && data.child('Uid').val() === auth.uid"
			},
			".read": true,
			".write": "auth != null && root.child('adminUids').child(auth.uid).exists()"
		},
		"clusteredLocations": {
			".read": true,
			".write": "auth != null && root.child('adminUids').child(auth.uid).exists()"
		},
		"pendingLocations": {
			".read": "auth != null && root.child('adminUids').child(auth.uid).exists()",
			".write": "auth != null"
		}
	}
}